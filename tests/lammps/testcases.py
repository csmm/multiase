from ase.data import s22
from multiasecalc.lammps import COMPASS, CHARMM, OPLSAA, ReaxFF
from multiasecalc.lammps.amber import AMBER
from multiasecalc.utils import get_datafile
from scripts import charmm_charges
import unittest
import numpy as np

def floatEqual(val1, val2):
	return np.max(np.abs(val1-val2)) < 1e-8

class PhenolDimerForces(unittest.TestCase):
	def test_compass(self):
		atoms = s22.create_s22_system('Phenol_dimer')
		atoms.calc = COMPASS(get_datafile('compass.frc'), debug=True)
				
		correct_potential_energy = 1.1292214747435319
		correct_forces = np.array([
			[-0.58532865, -1.02948981,  0.27846345],
			[ 0.66398246, -0.63491117,  0.83628972],
			[-0.48287662, -0.04799192, -0.4006301 ],
			[-2.58783953, -0.22402416, -1.46967881],
			[-0.94850735,  2.25150756, -1.96939371],
			[ 1.47069787,  2.69286305, -0.71898983],
			[ 2.62288206,  0.70942804,  1.18793356],
			[ 0.87337037, -2.25375815,  1.92195339],
			[ 1.05609802,  0.17041138,  0.54149188],
			[ 0.54477888, -0.95382378,  0.92172568],
			[-0.70809243, -1.21773337,  0.30365713],
			[-1.26220326, -0.28606908, -0.6142395 ],
			[-0.57463073,  0.7744395 , -0.83584741],
			[ 0.97987694, -0.62784282,  0.55972649],
			[-0.0356175 , -0.1501868 , -0.05421684],
			[-0.20208409, -0.21788337, -0.4914367 ],
			[ 2.60110895, -1.52517619,  1.35567458],
			[ 0.71517378,  1.74544848,  2.27729185],
			[-1.43310553,  2.57653451,  0.77410126],
			[-2.48923824,  1.30460468, -1.45240689],
			[-1.00170643, -1.4146541 , -2.33055598],
			[-0.98900508,  0.32035447, -0.74896309],
			[-0.44328954, -0.77745331, -1.15671575],
			[ 0.66996237, -1.23708677, -0.39313852],
			[ 1.13724093, -0.5081102 ,  0.7497263 ],
			[ 0.40834804,  0.56059377,  0.92819126]])

		self.assertTrue(floatEqual(atoms.get_potential_energy(), correct_potential_energy))
		self.assertTrue(floatEqual(atoms.get_forces(), correct_forces))

	def test_charmm(self):
		atoms = s22.create_s22_system('Phenol_dimer')
		atoms.calc = CHARMM(get_datafile('par_all36_cgenff.prm'), auto_charges=True, debug=True)
		
		#print repr(atoms.get_potential_energy())
		#print repr(atoms.get_forces())
	
		correct_potential_energy = 0.13171333507786795
		correct_forces = np.array([[ -1.14609588e+00,  -1.68044136e+00,   3.32508131e-01],
			[  7.42987519e-01,   1.22125020e+00,  -2.30420795e-01],
			[  5.10928862e-02,  -2.40164275e-02,  -9.17623432e-02],
			[ -3.79809694e-01,   8.44632975e-02,  -2.75951368e-01],
			[ -2.80007212e-02,   2.78276985e-01,  -1.94595975e-01],
			[  2.48727818e-01,   5.04129371e-01,  -1.43050802e-01],
			[  2.69371732e-01,   5.13040694e-02,   1.16361931e-01],
			[  4.33446752e-01,  -2.30499718e-01,   4.33384741e-01],
			[ -5.68932686e-02,  -1.51556670e-01,   5.39228276e-02],
			[ -4.52742910e-02,   7.18196262e-03,  -2.98185444e-02],
			[ -1.96953248e-02,   1.37811117e-03,  -5.01900456e-03],
			[  2.61989861e-02,  -1.53488541e-02,   2.55018215e-02],
			[ -1.74993233e-01,  -8.94128762e-02,  -4.01140929e-02],
			[ -3.85486922e-01,   9.25719510e-01,   4.81879250e-01],
			[  4.28691011e-01,  -1.09091506e+00,  -5.18938212e-01],
			[  9.39548322e-03,   7.04684008e-03,  -5.15542803e-02],
			[  5.74626392e-01,  -1.39957207e-01,   4.60015070e-01],
			[  4.74962676e-02,   1.70142091e-01,   2.10940339e-01],
			[ -2.74194688e-01,   4.50991000e-01,   1.18973751e-01],
			[ -3.10210309e-01,   2.23070580e-01,  -1.03398666e-01],
			[ -1.75186203e-01,  -1.58090773e-01,  -3.38170182e-01],
			[ -4.17067697e-03,  -1.48931841e-01,  -1.36341074e-01],
			[  3.26753714e-02,  -9.68853783e-03,   8.23883252e-03],
			[  2.31596396e-02,  -1.79533888e-02,  -1.45809626e-02],
			[ -1.47154780e-03,  -3.15734462e-02,  -3.41899928e-02],
			[  1.13609612e-01,  -1.36567868e-01,  -3.38248671e-02]])

		self.assertTrue(floatEqual(atoms.get_potential_energy(), correct_potential_energy))
		self.assertTrue(floatEqual(atoms.get_forces(), correct_forces))

	def test_oplsaa(self):
		atoms = s22.create_s22_system('Phenol_dimer')
		atoms.calc = OPLSAA(get_datafile('gromacs_top'), debug=True)
		
		#print repr(atoms.get_potential_energy())
		#print repr(atoms.get_forces())
	
		correct_potential_energy = -0.062390622543173034
		correct_forces = np.array([[-0.99934742,  0.60062751, -0.92934475],
			[ 1.49738413, -0.59381501,  1.27165664],
			[-0.46773388,  0.35558   , -0.65320215],
			[ 0.86493605,  0.63664139,  0.16984244],
			[ 0.52161811, -0.62858868,  0.70668309],
			[-0.21592548, -0.27999117,  0.03456557],
			[-1.00767333, -0.26563071, -0.46746502],
			[ 0.25111414,  0.4825644 , -0.1540449 ],
			[-0.07621414, -0.11071419,  0.02282912],
			[-0.08385533, -0.01973305, -0.04500153],
			[-0.00333647,  0.00295653, -0.00393023],
			[ 0.03864336, -0.04283558,  0.05092377],
			[-0.20540274, -0.1666799 , -0.02452565],
			[ 1.40070387, -0.3282372 ,  1.40641058],
			[-1.6663567 ,  1.19592123, -0.72028641],
			[-0.62982456,  0.05260933, -0.67998815],
			[ 0.05323247,  0.1238288 ,  0.11865936],
			[-0.4394388 , -0.55875947, -0.94335569],
			[ 0.21732223, -0.42828209, -0.14366484],
			[ 0.72366448, -0.15908641,  0.62773441],
			[ 0.11355931,  0.55776209,  0.63004138],
			[ 0.0154884 , -0.17698061, -0.14935117],
			[ 0.06050506, -0.04183933,  0.02984703],
			[-0.00284005, -0.0104994 , -0.01390648],
			[-0.00935546, -0.06454183, -0.07007639],
			[ 0.0491376 , -0.13227872, -0.07105295]])

		self.assertTrue(floatEqual(atoms.get_potential_energy(), correct_potential_energy))
		self.assertTrue(floatEqual(atoms.get_forces(), correct_forces))

	def test_amber(self):
		""" No Coulomb interactions! """
		atoms = s22.create_s22_system('Phenol_dimer')
		atoms.calc = AMBER(get_datafile('gromacs_top'), debug=True)
		
		#print repr(atoms.get_potential_energy())
		#print repr(atoms.get_forces())
	
		correct_potential_energy = 0.38857731234746423
		correct_forces = np.array([[-1.18749125,  0.45421729, -0.98112149],
			[ 1.16380578, -0.73614466,  1.16825927],
			[-0.28964879,  0.54465746, -0.46177132],
			[ 0.75869833,  0.61328115,  0.10483879],
			[ 0.52739421, -0.53842604,  0.65439899],
			[-0.1531065 , -0.1686985 ,  0.00555182],
			[-0.95449593, -0.19158174, -0.47770329],
			[ 0.4112903 ,  0.48570396, -0.0453879 ],
			[-0.09760219, -0.11103725,  0.04282734],
			[-0.11960383, -0.04644816, -0.04741171],
			[ 0.00453658,  0.01434263, -0.00601516],
			[ 0.03390179, -0.08343687,  0.07226281],
			[-0.33762943, -0.25592236, -0.05375544],
			[ 1.78715607, -0.64459437,  1.0313588 ],
			[-1.71998508,  1.06031735, -0.85318438],
			[-0.5425543 ,  0.44744382, -0.13815499],
			[ 0.1438899 ,  0.12917646,  0.23921417],
			[-0.48343602, -0.47770762, -0.92566314],
			[ 0.16283177, -0.32980134, -0.11719322],
			[ 0.65494972, -0.09670151,  0.60090937],
			[ 0.09163702,  0.44177613,  0.50695671],
			[ 0.054121  , -0.26201458, -0.19723685],
			[ 0.10470393, -0.07648994,  0.04392046],
			[-0.01137033,  0.00662512, -0.00577796],
			[-0.01275551, -0.0895369 , -0.09274888],
			[ 0.01076072, -0.08898964, -0.06737177]])

		self.assertTrue(floatEqual(atoms.get_potential_energy(), correct_potential_energy))
		self.assertTrue(floatEqual(atoms.get_forces(), correct_forces))
	
	def test_reaxff(self):
		atoms = s22.create_s22_system('Phenol_dimer')
		atoms.calc = ReaxFF(get_datafile('ffield.reax'), debug=True)
		
		#print repr(atoms.get_potential_energy())
		#print repr(atoms.get_forces())
	
		correct_potential_energy = -142.4691415172731
		correct_forces = np.array([[ 2.07723156,  3.96541299, -1.15132559],
			[-3.2265494 , -0.20475922, -1.49226283],
			[ 2.60729701,  0.3025817 ,  1.33967323],
			[ 5.04814524,  2.42645569,  1.66324749],
			[ 2.1388216 , -3.76116807,  3.61281947],
			[-2.80884034, -4.91705556,  1.26078092],
			[-5.08652247, -1.16750474, -2.46529692],
			[-0.73403717,  4.58245815, -3.24360016],
			[ 0.57589696,  0.03272494,  0.34879092],
			[ 0.22167946, -0.63391813,  0.53482248],
			[-0.39215936, -0.67218695,  0.16863779],
			[-0.75861594, -0.27159978, -0.30523254],
			[-0.45115578,  0.36083747, -0.49195707],
			[-1.93148048, -0.10359034, -2.32416844],
			[-1.29829954,  2.23213681,  0.54021264],
			[ 1.73759958,  1.86858085,  3.20233054],
			[-4.27793374,  3.30169938, -1.55869664],
			[-1.68371535, -3.23798885, -4.58176432],
			[ 2.71178281, -4.94754052, -1.52588302],
			[ 4.49239091, -2.09399613,  2.87009647],
			[ 0.39408212,  4.17231613,  4.14201763],
			[-0.52669605,  0.0963932 , -0.53510001],
			[-0.16398092, -0.54798349, -0.68089446],
			[ 0.37304923, -0.6820306 , -0.22145353],
			[ 0.68719527, -0.39223828,  0.3756307 ],
			[ 0.27481566,  0.29199609,  0.51855661]])

		self.assertTrue(floatEqual(atoms.get_potential_energy(), correct_potential_energy))
		self.assertTrue(floatEqual(atoms.get_forces(), correct_forces))

if __name__ == '__main__':
	unittest.main()