from ase.data import s22
from multiasecalc.lammps import COMPASS, CHARMM, OPLSAA, ReaxFF
from multiasecalc.lammps.amber import AMBER
from multiasecalc.lammps.pcff import PCFF
from multiasecalc.utils import get_datafile
from scripts import charmm_charges
import unittest
import numpy as np

def floatEqual(val1, val2):
	return np.max(np.abs((val1-val2)/val1)) < 1e-5

class PhenolDimerForces(unittest.TestCase):
	def test_compass(self):
		atoms = s22.create_s22_system('Phenol_dimer')
		atoms.calc = COMPASS(get_datafile('compass.frc'), debug=True)
		
		#print repr(atoms.get_potential_energy())
		#print repr(atoms.get_forces())
				
		correct_potential_energy = 1.1292214747435319
		correct_forces = np.array([
			[-0.58532865, -1.02948981,  0.27846345],
			[ 0.66398246, -0.63491117,  0.83628972],
			[-0.48287662, -0.04799192, -0.4006301 ],
			[-2.58783953, -0.22402416, -1.46967881],
			[-0.94850735,  2.25150756, -1.96939371],
			[ 1.47069787,  2.69286305, -0.71898983],
			[ 2.62288206,  0.70942804,  1.18793356],
			[ 0.87337037, -2.25375815,  1.92195339],
			[ 1.05609802,  0.17041138,  0.54149188],
			[ 0.54477888, -0.95382378,  0.92172568],
			[-0.70809243, -1.21773337,  0.30365713],
			[-1.26220326, -0.28606908, -0.6142395 ],
			[-0.57463073,  0.7744395 , -0.83584741],
			[ 0.97987694, -0.62784282,  0.55972649],
			[-0.0356175 , -0.1501868 , -0.05421684],
			[-0.20208409, -0.21788337, -0.4914367 ],
			[ 2.60110895, -1.52517619,  1.35567458],
			[ 0.71517378,  1.74544848,  2.27729185],
			[-1.43310553,  2.57653451,  0.77410126],
			[-2.48923824,  1.30460468, -1.45240689],
			[-1.00170643, -1.4146541 , -2.33055598],
			[-0.98900508,  0.32035447, -0.74896309],
			[-0.44328954, -0.77745331, -1.15671575],
			[ 0.66996237, -1.23708677, -0.39313852],
			[ 1.13724093, -0.5081102 ,  0.7497263 ],
			[ 0.40834804,  0.56059377,  0.92819126]])

		self.assertTrue(floatEqual(atoms.get_potential_energy(), correct_potential_energy))
		self.assertTrue(floatEqual(atoms.get_forces(), correct_forces))

	def test_pcff(self):
		atoms = s22.create_s22_system('Phenol_dimer')
		atoms.calc = PCFF(get_datafile('pcff.frc'), debug=True)
		
		#print repr(atoms.get_potential_energy())
		#print repr(atoms.get_forces())
	
		correct_potential_energy = 0.7130231849564879
		correct_forces = np.array([[-0.71480519, -1.28329556,  0.3645104 ],
			[ 0.04967878, -0.53716414,  0.49471069],
			[ 0.09348   , -0.01534812, -0.11906482],
			[-2.07445626, -0.11390926, -1.20787238],
			[-0.73966583,  1.86485154, -1.60159241],
			[ 1.21229552,  2.20360757, -0.57839907],
			[ 2.11963298,  0.62748723,  0.92173001],
			[ 0.59810805, -1.88464291,  1.5234026 ],
			[ 0.2852521 , -0.02439179,  0.19036841],
			[ 0.21954811, -0.42473057,  0.39414587],
			[-0.30727326, -0.52418093,  0.12873631],
			[-0.54397664, -0.1358207 , -0.25838934],
			[-0.28241305,  0.18535075, -0.29207718],
			[ 0.74483483, -0.79010695,  0.09408319],
			[ 0.13857866, -0.40611826, -0.10415103],
			[ 0.10965914,  0.09524275,  0.06383066],
			[ 2.17505664, -1.402304  ,  1.00164572],
			[ 0.51156198,  1.50225392,  1.84722837],
			[-1.15981628,  2.13178794,  0.66768576],
			[-2.07635995,  1.10578461, -1.19006274],
			[-0.82277313, -1.1263999 , -1.88925685],
			[-0.30276903, -0.00466359, -0.32949953],
			[-0.17988384, -0.35523179, -0.50759416],
			[ 0.28890336, -0.54238952, -0.17925419],
			[ 0.49949809, -0.24680245,  0.3101431 ],
			[ 0.15809251,  0.10113549,  0.2549922 ]])
		
		self.assertTrue(floatEqual(atoms.get_potential_energy(), correct_potential_energy))
		self.assertTrue(floatEqual(atoms.get_forces(), correct_forces))
		
	def test_charmm(self):
		atoms = s22.create_s22_system('Phenol_dimer')
		atoms.calc = CHARMM(get_datafile('par_all36_cgenff.prm'), auto_charges=True, debug=True)
		
		#print repr(atoms.get_potential_energy())
		#print repr(atoms.get_forces())
	
		correct_potential_energy = 0.13171333507786795
		correct_forces = np.array([[ -1.14609588e+00,  -1.68044136e+00,   3.32508131e-01],
			[  7.42987519e-01,   1.22125020e+00,  -2.30420795e-01],
			[  5.10928862e-02,  -2.40164275e-02,  -9.17623432e-02],
			[ -3.79809694e-01,   8.44632975e-02,  -2.75951368e-01],
			[ -2.80007212e-02,   2.78276985e-01,  -1.94595975e-01],
			[  2.48727818e-01,   5.04129371e-01,  -1.43050802e-01],
			[  2.69371732e-01,   5.13040694e-02,   1.16361931e-01],
			[  4.33446752e-01,  -2.30499718e-01,   4.33384741e-01],
			[ -5.68932686e-02,  -1.51556670e-01,   5.39228276e-02],
			[ -4.52742910e-02,   7.18196262e-03,  -2.98185444e-02],
			[ -1.96953248e-02,   1.37811117e-03,  -5.01900456e-03],
			[  2.61989861e-02,  -1.53488541e-02,   2.55018215e-02],
			[ -1.74993233e-01,  -8.94128762e-02,  -4.01140929e-02],
			[ -3.85486922e-01,   9.25719510e-01,   4.81879250e-01],
			[  4.28691011e-01,  -1.09091506e+00,  -5.18938212e-01],
			[  9.39548322e-03,   7.04684008e-03,  -5.15542803e-02],
			[  5.74626392e-01,  -1.39957207e-01,   4.60015070e-01],
			[  4.74962676e-02,   1.70142091e-01,   2.10940339e-01],
			[ -2.74194688e-01,   4.50991000e-01,   1.18973751e-01],
			[ -3.10210309e-01,   2.23070580e-01,  -1.03398666e-01],
			[ -1.75186203e-01,  -1.58090773e-01,  -3.38170182e-01],
			[ -4.17067697e-03,  -1.48931841e-01,  -1.36341074e-01],
			[  3.26753714e-02,  -9.68853783e-03,   8.23883252e-03],
			[  2.31596396e-02,  -1.79533888e-02,  -1.45809626e-02],
			[ -1.47154780e-03,  -3.15734462e-02,  -3.41899928e-02],
			[  1.13609612e-01,  -1.36567868e-01,  -3.38248671e-02]])

		self.assertTrue(floatEqual(atoms.get_potential_energy(), correct_potential_energy))
		self.assertTrue(floatEqual(atoms.get_forces(), correct_forces))

	def test_oplsaa(self):
		atoms = s22.create_s22_system('Phenol_dimer')
		atoms.calc = OPLSAA(get_datafile('gromacs_top'), debug=True)
		
		#print repr(atoms.get_potential_energy())
		#print repr(atoms.get_forces())
	
		correct_potential_energy = -0.06240925176151807
		correct_forces = np.array([[-0.9977733 ,  0.59908375, -0.93185987],
			[ 1.49738847, -0.59381934,  1.27164796],
			[-0.46773388,  0.35558   , -0.65320215],
			[ 0.86235588,  0.63916519,  0.1739616 ],
			[ 0.52375596, -0.63068317,  0.70326167],
			[-0.21838032, -0.27758403,  0.0385016 ],
			[-1.00507582, -0.26818269, -0.47162798],
			[ 0.24781414,  0.48581671, -0.14875492],
			[-0.07530306, -0.11160576,  0.02137625],
			[-0.08419574, -0.01940036, -0.04445731],
			[-0.00260927,  0.00224274, -0.00509658],
			[ 0.03820586, -0.0424058 ,  0.05162626],
			[-0.20424102, -0.16782341, -0.02638684],
			[ 1.39988862, -0.32894013,  1.40719114],
			[-1.67164712,  1.19148075, -0.71528653],
			[-0.62982456,  0.05260933, -0.67998815],
			[ 0.06378946,  0.13270803,  0.10865266],
			[-0.44146824, -0.56045934, -0.94144767],
			[ 0.21968211, -0.42629558, -0.14590936],
			[ 0.71972701, -0.1624094 ,  0.63146372],
			[ 0.12581531,  0.56811744,  0.61844148],
			[ 0.01067845, -0.18103732, -0.1447819 ],
			[ 0.05941402, -0.04275779,  0.03088977],
			[-0.00425773, -0.01169244, -0.0125572 ],
			[-0.00984391, -0.06495422, -0.06961153],
			[ 0.04384328, -0.13675433, -0.06604223]])

		self.assertTrue(floatEqual(atoms.get_potential_energy(), correct_potential_energy))
		self.assertTrue(floatEqual(atoms.get_forces(), correct_forces))

	def test_amber(self):
		""" No Coulomb interactions! """
		atoms = s22.create_s22_system('Phenol_dimer')
		atoms.calc = AMBER(get_datafile('gromacs_top'), debug=True)
		
		#print repr(atoms.get_potential_energy())
		#print repr(atoms.get_forces())
	
		correct_potential_energy = 0.39075435072974757
		correct_forces = np.array([[-1.1906655 ,  0.45772978, -0.97468625],
			[ 1.18405248, -0.75815195,  1.12901476],
			[-0.30847618,  0.56488681, -0.42610044],
			[ 0.76226286,  0.60969061,  0.09906009],
			[ 0.5314184 , -0.54237217,  0.64793341],
			[-0.15815582, -0.16373808,  0.01366008],
			[-0.94913179, -0.19686999, -0.48634142],
			[ 0.39993714,  0.49693093, -0.02719272],
			[-0.09077277, -0.11772183,  0.03193714],
			[-0.12305865, -0.04306107, -0.04187368],
			[ 0.00430795,  0.01456813, -0.00564414],
			[ 0.03533103, -0.0848423 ,  0.06996885],
			[-0.33699718, -0.2565442 , -0.05476799],
			[ 1.82120557, -0.61473385,  0.99694505],
			[-1.75243877,  1.03246892, -0.82218772],
			[-0.55985224,  0.43207905, -0.11997936],
			[ 0.14886679,  0.13333247,  0.23450049],
			[-0.48972815, -0.48300238, -0.91963119],
			[ 0.16539936, -0.32760495, -0.11966324],
			[ 0.64969399, -0.10117973,  0.60595696],
			[ 0.11435808,  0.46112085,  0.4854698 ],
			[ 0.04493735, -0.26975724, -0.18851026],
			[ 0.11293443, -0.06956729,  0.03605912],
			[-0.01001997,  0.00776057, -0.00706015],
			[-0.01682267, -0.09297524, -0.0888808 ],
			[ 0.01141929, -0.08843935, -0.06799101]])
		self.assertTrue(floatEqual(atoms.get_potential_energy(), correct_potential_energy))
		self.assertTrue(floatEqual(atoms.get_forces(), correct_forces))
	
	def test_reaxff(self):
		atoms = s22.create_s22_system('Phenol_dimer')
		atoms.calc = ReaxFF(get_datafile('ffield.reax'), debug=True)
		
		#print repr(atoms.get_potential_energy())
		#print repr(atoms.get_forces())
	
		correct_potential_energy = -142.4691415172731
		correct_forces = np.array([[ 2.07723156,  3.96541299, -1.15132559],
			[-3.2265494 , -0.20475922, -1.49226283],
			[ 2.60729701,  0.3025817 ,  1.33967323],
			[ 5.04814524,  2.42645569,  1.66324749],
			[ 2.1388216 , -3.76116807,  3.61281947],
			[-2.80884034, -4.91705556,  1.26078092],
			[-5.08652247, -1.16750474, -2.46529692],
			[-0.73403717,  4.58245815, -3.24360016],
			[ 0.57589696,  0.03272494,  0.34879092],
			[ 0.22167946, -0.63391813,  0.53482248],
			[-0.39215936, -0.67218695,  0.16863779],
			[-0.75861594, -0.27159978, -0.30523254],
			[-0.45115578,  0.36083747, -0.49195707],
			[-1.93148048, -0.10359034, -2.32416844],
			[-1.29829954,  2.23213681,  0.54021264],
			[ 1.73759958,  1.86858085,  3.20233054],
			[-4.27793374,  3.30169938, -1.55869664],
			[-1.68371535, -3.23798885, -4.58176432],
			[ 2.71178281, -4.94754052, -1.52588302],
			[ 4.49239091, -2.09399613,  2.87009647],
			[ 0.39408212,  4.17231613,  4.14201763],
			[-0.52669605,  0.0963932 , -0.53510001],
			[-0.16398092, -0.54798349, -0.68089446],
			[ 0.37304923, -0.6820306 , -0.22145353],
			[ 0.68719527, -0.39223828,  0.3756307 ],
			[ 0.27481566,  0.29199609,  0.51855661]])

		self.assertTrue(floatEqual(atoms.get_potential_energy(), correct_potential_energy))
		self.assertTrue(floatEqual(atoms.get_forces(), correct_forces))

if __name__ == '__main__':
	unittest.main()